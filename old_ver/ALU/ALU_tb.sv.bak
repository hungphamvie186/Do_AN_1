`timescale 1ns/1ps

module alu_tb;

    // Inputs
    logic rst_n;
    logic [3:0] A;
    logic [3:0] B;
    logic [2:0] op;

    // Outputs
    logic [4:0] Result;

    // Instantiate the DUT (Device Under Test)
    alu DUT (
        .rst_n(rst_n),
        .A(A),
        .B(B),
        .op(op),
        .Result(Result)
    );

    // Stimulus
    initial begin
        // Initialize inputs
        rst_n = 1;
        A = 4'b0;
        B = 4'b0;
        op = 3'b0;

        // Reset the DUT
        rst_n = 0;
        #10 rst_n = 1;

        // Test each operation with random inputs
        repeat (10) begin
            A = $random % 16; // Random 4-bit number
            B = $random % 16; // Random 4-bit number
            
            // Test ADD operation
            op = 3'b000;
            #10 $display("ADD: A = %d, B = %d, Result = %d", A, B, Result);

            // Test SUB operation
            op = 3'b001;
            #10 $display("SUB: A = %d, B = %d, Result = %d", A, B, Result);

            // Test AND operation
            op = 3'b010;
            #10 $display("AND: A = %d, B = %d, Result = %d", A, B, Result);

            // Test OR operation
            op = 3'b011;
            #10 $display("OR : A = %d, B = %d, Result = %d", A, B, Result);

            // Test XOR operation
            op = 3'b100;
            #10 $display("XOR: A = %d, B = %d, Result = %d", A, B, Result);

            // Test NOT operation
            op = 3'b101;
            #10 $display("NOT: A = %d, Result = %d", A, Result);

            // Test Shift Right operation
            op = 3'b110;
            #10 $display("SHR: A = %d, B = %d, Result = %d", A, B, Result);

            // Test Shift Left operation
            op = 3'b111;
            #10 $display("SHL: A = %d, B = %d, Result = %d", A, B, Result);

            #20; // Wait before next set of random values
        end

        // Finish the simulation
        $finish;
    end

endmodule
