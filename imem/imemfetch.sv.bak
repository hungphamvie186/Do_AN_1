module imem (
    input logic [31:0] addr,
    output logic [31:0] instruction
);
    logic [31:0] memory [0:255]; // Define a 256 x 32-bit memory array

    // Initialize the instruction memory with some instructions
    initial begin
        memory[0] = 32'h00000013; // NOP (addi x0, x0, 0)
        memory[1] = 32'h00400093; // addi x1, x0, 4
        memory[2] = 32'h00500113; // addi x2, x0, 5
        memory[3] = 32'h002081b3; // add x3, x1, x2
        memory[4] = 32'h00610263; // beq x2, x6, 8 (branch if x2 == x6 to PC+8)
        memory[5] = 32'h00410213; // ori x4, x2, 4 (x4 = x2 | 4)
        memory[6] = 32'h00012303; // lw x6, 0(x2) (load word from address in x2 to x6)
    end

    // Read the instruction at the given address
    assign instruction = memory[addr >> 2]; // Assuming addr is byte addressable
endmodule
`timescale 1ns/1ps
module imemfetch (
    input [31:0] inst,    // 32-bit instruction input
    output [6:0] opcode,         // Opcode field
    output [2:0] funct3,         // Funct3 field
    output [31:25]funct7,         // Funct7 field
    output [4:0] rs1,            // Source register 1 field
    output [4:0] rs2,            // Source register 2 field
    output [4:0] rd              // Destination register field
	 
);
	imem imem_fetch (
        .instruction(inst)
    );

    assign opcode = inst[6:0];

   
    assign funct3 = inst[14:12];


    assign funct7 = inst[31:25];


    assign rs1 = inst[19:15];


    assign rs2 = inst[24:20];


    assign rd = inst[11:7];

endmodule